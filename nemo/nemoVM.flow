import nemoParser;
import sys/system;
import translator;
import ds/array;
import ds/dlist;

export {
    exec(p : VneProg) -> DList<Node>;
}

Node(label: int, values: Tree<string, Value>);
Value ::= IntValue, ArrayValue;
IntValue(val : int);
ArrayValue(val : [Value]);

typeCheck(l : Value, r : Value) -> bool {
    switch(l) {
        IntValue(int1):
        switch(r) {
            IntValue(int2): true;
            ArrayValue(arr): false;
        }
        ArrayValue(inner1):
        switch(r) {
            IntValue(val): false;
            ArrayValue(inner2): {
                if (length(inner1) == 0 && length(inner2) > 0) {
                    typeCheck(IntValue(0), inner2[0])
                } else if (length(inner2) == 0 && length(inner1) > 0) {
                    typeCheck(IntValue(0), inner1[0])
                } else if (length(inner1) == 0 && length(inner2) == 0) {
                    true;
                } else {
                    typeCheck(inner1[0], inner2[0]);
                }
            }
        }
    }
}

calcArExp(l : Value, r : Value, op : string) -> Maybe<int> {
    switch(l) {
        ArrayValue(linner) : None();
        IntValue(left):
        switch(r) {
            ArrayValue(rinner) : None();
            IntValue(right): {
                if (op == "+") Some(left + right)
                else if (op == "-") Some(left - right)
                else if (op == "*") Some(left * right)
                else if (op == "/") Some(left / right)
                else None()
            }
        }
    }
}

calcExpValue(e : VneExp, vars : Tree<string, Value>) -> Maybe<Value> {
    switch(e) {
        VneVar(name): lookupTree(vars, name);
        VneConst(val): Some(IntValue(val));
        VneArExp(l, r, op): {
            ret: Maybe<Value> = {
                ll = calcExpValue(l, vars);
                rr = calcExpValue(r, vars);
                switch(ll) {
                    None(): None();
                    Some(llval):
                    switch(rr) {
                        None(): None();
                        Some(rrval):
                        switch(calcArExp(llval, rrval, op)) {
                            None(): None();
                            Some(res): Some(IntValue(res));
                        }
                    }
                }
            }
            ret;
        };
        VneApp(a, i): {
            switch(calcExpValue(a, vars)) {
                None(): None();
                Some(v):
                switch(v) {
                    IntValue(val): None();
                    ArrayValue(arr):
                    switch(calcExpValue(i, vars)) {
                        None(): None();
                        Some(value):
                        switch(value) {
                            ArrayValue(arrr): None();
                            IntValue(index): {
                                if (index < length(arr)) {
                                    Some(arr[index])
                                } else {
                                    None()
                                }
                            }
                        }
                    }
                }
            }
        }
        VneUpd(a, i, v): {
            switch(calcExpValue(a, vars)) {
                None(): None();
                Some(val1):
                switch(val1) {
                    IntValue(intvalue): None();
                    ArrayValue(arr):
                    switch(calcExpValue(i, vars)) {
                        None(): None();
                        Some(val2):
                        switch(val2) {
                            ArrayValue(arrr): None();
                            IntValue(index):
                            switch(calcExpValue(v, vars)) {
                                None(): None();
                                Some(val3):
                                if (typeCheck(val1, ArrayValue([val3]))) {
                                    if (index < length(arr)) {
                                        Some(ArrayValue(replace(arr, index, val3)))
                                    } else if (index == length(arr)) {
                                        Some(ArrayValue(concat(arr, [val3])));
                                    } else {
                                        None()
                                    }
                                } else {
                                    None();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

calcCondValue(rel : VneRel, vars : Tree<string, Value>) -> Maybe<bool> {
    left = calcExpValue(rel.l, vars);
    right = calcExpValue(rel.r, vars);
    switch(left) {
        None(): None();
        Some(ll): 
        switch(right) {
            None(): None();
            Some(rr): {
                if (rel.s == "==") Some(rr == ll)
                else if (rel.s == "!=") Some(ll != rr)
                else if (rel.s == "<") Some(ll < rr)
                else if (rel.s == ">") Some(ll > rr)
                else if (rel.s == "<=") Some(ll <= rr)
                else if (rel.s == ">=") Some(ll >= rr)
                else None()
            }
        }
    }
}

value2str(val : Value) -> string {
    switch(val) {
        IntValue(v): i2s(v);
        ArrayValue(arr): "[" + fold(arr, "", \ s, v -> {s + " " + value2str(v)}) + "]";
    }
}

printVneExp(e: VneExp, t: Tree<string, Value>) -> void {
    switch(calcExpValue(e, t)) {
        None(): println("Bad expression!");
        Some(v): println(value2str(v));
    }
}

getOperByLabel(label: int, prog: VneProg) -> Maybe<VneOperator> {
    find(prog.body, \ oper -> {
        switch(oper) {
            VneIfElse(lab, cond, lm, rm): {
                if(lab == label) true
                else false
            }
            VnePrint(lab, e, labels): {
                if(lab == label) true
                else false
            }
            VneAssign(lab, var, val, labels): {
                if(lab == label) true
                else false
            }
        }
    })
}

printValue(v : Value) -> void {
    switch(v) {
        IntValue(val): println(i2s(val));
        ArrayValue(vals): {
            iter(vals, \it -> printValue(it));
        }
    }
}

execNode(node: Node, prog: VneProg) -> Pair<bool, DList<Node>> {
    oper = getOperByLabel(node.label, prog);
    result = switch(oper) {
        None(): Pair(false, Some([node]));
        Some(v): 
        switch(v) {
            VneIfElse(lab, cond, lm, rm): 
                switch(calcCondValue(cond, node.values)) {
                    None(): Pair(false, None());
                    Some(res): if(res) {
                        Pair(true, Some(map(lm, \label -> { Node(label.val, node.values) })))
                    } else {
                        Pair(true, Some(map(rm, \label -> { Node(label.val, node.values) })))
                    }
                }
            VnePrint(lab, e, labels): { 
                printVneExp(e, node.values);
                Pair(true, Some(map(labels, \label -> { Node(label.val, node.values) })));
            }
            VneAssign(lab, var, e, labels): {
                switch(calcExpValue(e, node.values)) {
                    None(): Pair(false, None());
                    Some(val): 
                    switch(lookupTree(node.values, var.str)) {
                        None(): Pair(false, None());
                        Some(var_val): {
                            upd_tree = setTree(node.values, var.str, val);
                            Pair(true, Some(map(labels, \ label -> { Node(label.val, upd_tree) })))
                        }
                    }
                }
            }
        }
    }
    arr : Maybe<[Node]> = result.second;
    ret = switch(arr) {
        None():makeDList();
        Some(array): fold(array, makeDList(), \ q, n -> { pushDList(q, n); q});
    }
    Pair(result.first, ret)
}

initVars(p : VneProg) -> Tree<string, Value> {
    fold(p.desc, makeTree(), \variables, d -> {
        switch(d.type) {
            VneInt(): setTree(variables, d.name, IntValue(0));
            VneArray(t): setTree(variables, d.name, ArrayValue([]));
        }
    })
}

exec(p : VneProg) -> DList<Node> {
    node = Node(0, initVars(p));
    queue = makeDList();
    pushDList(queue, node);
    for(queue, \ q -> { !isEmptyDList(q) }, \ q -> {
        switch(popFirstDList(q)) {
            None(): makeDList();
            Some(v): {
                newQueue = execNode(v, p);
                if(newQueue.first) {
                    concatDList(q, newQueue.second);
                    q
                } else { 
                    q 
                }
            }
        }
    });
}
